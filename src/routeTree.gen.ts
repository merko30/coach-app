/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DashboardPlansIndexRouteImport } from './routes/dashboard/plans/index'
import { Route as DashboardClientsIndexRouteImport } from './routes/dashboard/clients/index'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardPlansIndexRoute = DashboardPlansIndexRouteImport.update({
  id: '/plans/',
  path: '/plans/',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardClientsIndexRoute = DashboardClientsIndexRouteImport.update({
  id: '/clients/',
  path: '/clients/',
  getParentRoute: () => DashboardRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/dashboard/clients': typeof DashboardClientsIndexRoute
  '/dashboard/plans': typeof DashboardPlansIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/dashboard/clients': typeof DashboardClientsIndexRoute
  '/dashboard/plans': typeof DashboardPlansIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/dashboard/clients/': typeof DashboardClientsIndexRoute
  '/dashboard/plans/': typeof DashboardPlansIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/dashboard/clients'
    | '/dashboard/plans'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/dashboard/clients'
    | '/dashboard/plans'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/login'
    | '/register'
    | '/dashboard/clients/'
    | '/dashboard/plans/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/plans/': {
      id: '/dashboard/plans/'
      path: '/plans'
      fullPath: '/dashboard/plans'
      preLoaderRoute: typeof DashboardPlansIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/clients/': {
      id: '/dashboard/clients/'
      path: '/clients'
      fullPath: '/dashboard/clients'
      preLoaderRoute: typeof DashboardClientsIndexRouteImport
      parentRoute: typeof DashboardRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardClientsIndexRoute: typeof DashboardClientsIndexRoute
  DashboardPlansIndexRoute: typeof DashboardPlansIndexRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardClientsIndexRoute: DashboardClientsIndexRoute,
  DashboardPlansIndexRoute: DashboardPlansIndexRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
