/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthenticatedDashboardIndexRouteImport } from './routes/_authenticated/dashboard/index'
import { Route as AuthenticatedDashboardClientsRouteImport } from './routes/_authenticated/dashboard/clients'
import { Route as AuthenticatedDashboardPlansIndexRouteImport } from './routes/_authenticated/dashboard/plans/index'
import { Route as AuthenticatedDashboardPlansCreateRouteImport } from './routes/_authenticated/dashboard/plans/create'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedDashboardIndexRoute =
  AuthenticatedDashboardIndexRouteImport.update({
    id: '/dashboard/',
    path: '/dashboard/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedDashboardClientsRoute =
  AuthenticatedDashboardClientsRouteImport.update({
    id: '/dashboard/clients',
    path: '/dashboard/clients',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedDashboardPlansIndexRoute =
  AuthenticatedDashboardPlansIndexRouteImport.update({
    id: '/dashboard/plans/',
    path: '/dashboard/plans/',
    getParentRoute: () => AuthenticatedRoute,
  } as any)
const AuthenticatedDashboardPlansCreateRoute =
  AuthenticatedDashboardPlansCreateRouteImport.update({
    id: '/dashboard/plans/create',
    path: '/dashboard/plans/create',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/dashboard/clients': typeof AuthenticatedDashboardClientsRoute
  '/dashboard': typeof AuthenticatedDashboardIndexRoute
  '/dashboard/plans/create': typeof AuthenticatedDashboardPlansCreateRoute
  '/dashboard/plans': typeof AuthenticatedDashboardPlansIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/dashboard/clients': typeof AuthenticatedDashboardClientsRoute
  '/dashboard': typeof AuthenticatedDashboardIndexRoute
  '/dashboard/plans/create': typeof AuthenticatedDashboardPlansCreateRoute
  '/dashboard/plans': typeof AuthenticatedDashboardPlansIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_authenticated/dashboard/clients': typeof AuthenticatedDashboardClientsRoute
  '/_authenticated/dashboard/': typeof AuthenticatedDashboardIndexRoute
  '/_authenticated/dashboard/plans/create': typeof AuthenticatedDashboardPlansCreateRoute
  '/_authenticated/dashboard/plans/': typeof AuthenticatedDashboardPlansIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/dashboard/clients'
    | '/dashboard'
    | '/dashboard/plans/create'
    | '/dashboard/plans'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/dashboard/clients'
    | '/dashboard'
    | '/dashboard/plans/create'
    | '/dashboard/plans'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/register'
    | '/_authenticated/dashboard/clients'
    | '/_authenticated/dashboard/'
    | '/_authenticated/dashboard/plans/create'
    | '/_authenticated/dashboard/plans/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/dashboard/': {
      id: '/_authenticated/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard/clients': {
      id: '/_authenticated/dashboard/clients'
      path: '/dashboard/clients'
      fullPath: '/dashboard/clients'
      preLoaderRoute: typeof AuthenticatedDashboardClientsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard/plans/': {
      id: '/_authenticated/dashboard/plans/'
      path: '/dashboard/plans'
      fullPath: '/dashboard/plans'
      preLoaderRoute: typeof AuthenticatedDashboardPlansIndexRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard/plans/create': {
      id: '/_authenticated/dashboard/plans/create'
      path: '/dashboard/plans/create'
      fullPath: '/dashboard/plans/create'
      preLoaderRoute: typeof AuthenticatedDashboardPlansCreateRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedRouteChildren {
  AuthenticatedDashboardClientsRoute: typeof AuthenticatedDashboardClientsRoute
  AuthenticatedDashboardIndexRoute: typeof AuthenticatedDashboardIndexRoute
  AuthenticatedDashboardPlansCreateRoute: typeof AuthenticatedDashboardPlansCreateRoute
  AuthenticatedDashboardPlansIndexRoute: typeof AuthenticatedDashboardPlansIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedDashboardClientsRoute: AuthenticatedDashboardClientsRoute,
  AuthenticatedDashboardIndexRoute: AuthenticatedDashboardIndexRoute,
  AuthenticatedDashboardPlansCreateRoute:
    AuthenticatedDashboardPlansCreateRoute,
  AuthenticatedDashboardPlansIndexRoute: AuthenticatedDashboardPlansIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
